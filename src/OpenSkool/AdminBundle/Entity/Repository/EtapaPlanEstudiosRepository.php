<?php

namespace OpenSkool\AdminBundle\Entity\Repository;

use Yepsua\RADBundle\ORM\EntityRepository;

use OpenSkool\AdminBundle\Entity\EtapaPlanEstudios;

/**
 * EtapaPlanEstudiosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtapaPlanEstudiosRepository extends EntityRepository
{
    const REPOSITORY_NAMESPACE = 'OpenSkoolAdminBundle:EtapaPlanEstudios';
    
    /**
     * 
     * @param type $arrayIdsOrden
     */
    public function ordenarEtapas($arrayIdsOrden){
        $etapas = $this->findBy(array("id" => array_keys($arrayIdsOrden)));
        if($etapas){
          $em = $this->getEntityManager();
          foreach($etapas as $etapa){
            $etapa->setOrden($arrayIdsOrden[$etapa->getId()]);
            $em->persist($etapa);
          }
          $em->flush();
        }
        
    }
    
    /**
     * 
     * @param type $arrayIdsOrden
     */
    public function crearEtapaPlanEstudios($planEstudio, $etapaId){
      $etapaPlanEstudios = new EtapaPlanEstudios();
      $em = $this->getEntityManager();
      $etapaPlanEstudios->setEtapa($em->getReference('OpenSkoolAdminBundle:Etapa', $etapaId));
      $etapaPlanEstudios->setPlanEstudios($em->getReference('OpenSkoolAdminBundle:PlanEstudios', $planEstudio));
      $etapaPlanEstudios->setOrden(1000);
      $etapaPlanEstudios->setActivo(true);
      $em->persist($etapaPlanEstudios);
      $em->flush();
    }
    
    /**
     * 
     * @param type $arrayIdsOrden
     */
    public function getEtapasPorPlanEstudios($planEstudioId, array $criteria = array(), $orderBy = array('orden' => 'ASC')){
      return $this->findBy(array_merge(array('planEstudios' => $planEstudioId), $criteria),$orderBy);
    }
    
    /**
     * 
     * @param type $etapaId
     * @throws type
     */
    public function eliminarEtapa($etapaId){
      $em = $this->getEntityManager();
      $etapaPlanE = $this->find($etapaId);
      if($etapaPlanE){
        $em->remove($etapaPlanE);
        $em->flush();
      }else{
        throw $this->createNotFoundException();
      }
    }
    
    /**
     * 
     * @param integer $etapaId
     * @param boolean $activo
     * @throws Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    public function activarEtapa($etapaId, $activo = true){
      $em = $this->getEntityManager();
      $etapaPlanE = $this->find($etapaId);
      if($etapaPlanE){
        $etapaPlanE->setActivo($activo);
        $em->persist($etapaPlanE);
        $em->flush();
      }else{
        throw $this->createNotFoundException();
      }
    }
}
